{"mappings":"ACEA,IAAM,EAAQ,SAAS,aAAa,CAAC,UAE/B,EAAe,SAAS,aAAa,CAAC,eACtC,EAAe,SAAS,aAAa,CAAC,eACtC,EAAkB,SAAS,aAAa,CAAC,kBACzC,EAAkB,SAAS,aAAa,CAAC,kBAOzC,EAAqB,WACzB,IAAM,EAAW,EAAM,IAAI,CAAC,MAAM,CAC5B,EAAc,EAAM,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,AAE9C,CAAA,EAAa,QAAQ,CAAG,GATT,GAUf,EAAa,QAAQ,CAAG,GATT,EAUf,EAAgB,QAAQ,CAAG,GATT,GAUlB,EAAgB,QAAQ,CAAG,GATT,CAUpB,EA0DA,EAAa,gBAAgB,CAAC,QAxDZ,WAGhB,IAAI,CAAA,AAFa,EAAM,IAAI,CAAC,MAAM,EAhBnB,EAkBC,GAMhB,IAAK,IAFC,EAAS,EAAM,SAAS,GAErB,EAAI,EAAG,EAAI,EAAM,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,CAAE,IAC9C,EAAO,UAAU,GAGnB,IACF,GA2CA,EAAgB,gBAAgB,CAAC,QAzCZ,WAGnB,IAAI,CAAA,AAFgB,EAAM,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,EA9B5B,EAgCC,GAId,IAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,IAAK,EAAA,EAAa,EAAM,IAAI,CAAA,OAAA,QAAA,CAAA,GAAvB,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAL,CAAA,EACE,AADG,EAAA,KAAA,CACC,UAAU,E,C,M,E,CADX,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,CAIL,IACF,GA+BA,EAAa,gBAAgB,CAAC,QAfZ,WACC,EAAM,IAAI,CAAC,MAAM,EA3DnB,IAiEf,EAAM,SAAS,CAAC,IAEhB,IACF,GAMA,EAAgB,gBAAgB,CAAC,QA9BZ,WAGnB,IAAI,CAAA,AAFgB,EAAM,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,EA3C5B,CA6CC,GAId,IAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,IAAK,EAAA,EAAa,EAAM,IAAI,CAAA,OAAA,QAAA,CAAA,GAAvB,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAL,CAAA,EACE,AADG,EAAA,KAAA,CACC,UAAU,CAAC,G,C,M,E,CADZ,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,CAIL,IACF","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nvar table = document.querySelector(\".field\");\nvar appendRowBtn = document.querySelector(\".append-row\");\nvar removeRowBtn = document.querySelector(\".remove-row\");\nvar appendColumnBtn = document.querySelector(\".append-column\");\nvar removeColumnBtn = document.querySelector(\".remove-column\");\nvar MAX_ROWS = 10;\nvar MIN_ROWS = 2;\nvar MAX_COLUMNS = 10;\nvar MIN_COLUMNS = 2;\nvar updateButtonStates = function() {\n    var rowCount = table.rows.length;\n    var columnCount = table.rows[0].cells.length;\n    appendRowBtn.disabled = rowCount >= MAX_ROWS;\n    removeRowBtn.disabled = rowCount <= MIN_ROWS;\n    appendColumnBtn.disabled = columnCount >= MAX_COLUMNS;\n    removeColumnBtn.disabled = columnCount <= MIN_COLUMNS;\n};\nvar appendRow = function() {\n    var rowCount = table.rows.length;\n    if (rowCount >= MAX_ROWS) return;\n    var newRow = table.insertRow();\n    for(var i = 0; i < table.rows[0].cells.length; i++)newRow.insertCell();\n    updateButtonStates();\n};\nvar appendColumn = function() {\n    var columnCount = table.rows[0].cells.length;\n    if (columnCount >= MAX_COLUMNS) return;\n    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n    try {\n        for(var _iterator = table.rows[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n            var row = _step.value;\n            row.insertCell();\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n            }\n        } finally{\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n    updateButtonStates();\n};\nvar removeColumn = function() {\n    var columnCount = table.rows[0].cells.length;\n    if (columnCount <= MIN_COLUMNS) return;\n    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n    try {\n        for(var _iterator = table.rows[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n            var row = _step.value;\n            row.deleteCell(-1);\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n            }\n        } finally{\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n    updateButtonStates();\n};\nvar removeRow = function() {\n    var rowCount = table.rows.length;\n    if (rowCount <= MIN_ROWS) return;\n    table.deleteRow(-1);\n    updateButtonStates();\n};\nappendRowBtn.addEventListener(\"click\", appendRow);\nappendColumnBtn.addEventListener(\"click\", appendColumn);\nremoveRowBtn.addEventListener(\"click\", removeRow);\nremoveColumnBtn.addEventListener(\"click\", removeColumn);\n\n//# sourceMappingURL=index.5608a8d4.js.map\n","'use strict';\n\nconst table = document.querySelector('.field');\n\nconst appendRowBtn = document.querySelector('.append-row');\nconst removeRowBtn = document.querySelector('.remove-row');\nconst appendColumnBtn = document.querySelector('.append-column');\nconst removeColumnBtn = document.querySelector('.remove-column');\n\nconst MAX_ROWS = 10;\nconst MIN_ROWS = 2;\nconst MAX_COLUMNS = 10;\nconst MIN_COLUMNS = 2;\n\nconst updateButtonStates = () => {\n  const rowCount = table.rows.length;\n  const columnCount = table.rows[0].cells.length;\n\n  appendRowBtn.disabled = rowCount >= MAX_ROWS;\n  removeRowBtn.disabled = rowCount <= MIN_ROWS;\n  appendColumnBtn.disabled = columnCount >= MAX_COLUMNS;\n  removeColumnBtn.disabled = columnCount <= MIN_COLUMNS;\n};\n\nconst appendRow = () => {\n  const rowCount = table.rows.length;\n\n  if (rowCount >= MAX_ROWS) {\n    return;\n  }\n\n  const newRow = table.insertRow();\n\n  for (let i = 0; i < table.rows[0].cells.length; i++) {\n    newRow.insertCell();\n  }\n\n  updateButtonStates();\n};\n\nconst appendColumn = () => {\n  const columnCount = table.rows[0].cells.length;\n\n  if (columnCount >= MAX_COLUMNS) {\n    return;\n  }\n\n  for (const row of table.rows) {\n    row.insertCell();\n  }\n\n  updateButtonStates();\n};\n\nconst removeColumn = () => {\n  const columnCount = table.rows[0].cells.length;\n\n  if (columnCount <= MIN_COLUMNS) {\n    return;\n  }\n\n  for (const row of table.rows) {\n    row.deleteCell(-1);\n  }\n\n  updateButtonStates();\n};\n\nconst removeRow = () => {\n  const rowCount = table.rows.length;\n\n  if (rowCount <= MIN_ROWS) {\n    return;\n  }\n\n  table.deleteRow(-1);\n\n  updateButtonStates();\n};\n\nappendRowBtn.addEventListener('click', appendRow);\nappendColumnBtn.addEventListener('click', appendColumn);\n\nremoveRowBtn.addEventListener('click', removeRow);\nremoveColumnBtn.addEventListener('click', removeColumn);\n"],"names":["table","document","querySelector","appendRowBtn","removeRowBtn","appendColumnBtn","removeColumnBtn","updateButtonStates","rowCount","rows","length","columnCount","cells","disabled","addEventListener","newRow","insertRow","i","insertCell","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","row","value","err","return","deleteRow","deleteCell"],"version":3,"file":"index.5608a8d4.js.map"}